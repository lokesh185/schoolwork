from tkinter import *
import tkinter as tk
from pandastable import Table, TableModel
from tkinter import messagebox
import mysql.connector
import pandas as pd


class table_options(Frame):
    def __init__(self, master, data=None, **kw):
        self.cur_result_no = -1
        [kw.pop(key, None) for key in ['height', 'width']]
        # self.data is list of pandas dataframes
        self.data = []
        self.results = []
        self.mycon = None
        self.cur = None
        self.text = ""
        self.height = 100
        self.table_frame = None
        self.sel_table = None
        if data is not None:
            self.input_data(*data)

        Frame.__init__(self, master, **kw, height=1000, width=1800)
        self.grid_propagate(False)

        opf = tk.Frame(self, height=200, width=840, relief=SUNKEN, bd=5)

        Button(opf, text='commit', command=self.mysql_commit).place(y=0, x=640, height=50, width=100)
        Button(opf, text='rollback', command=self.mysql_rollback).place(y=50, x=640, height=50, width=100)
        Button(opf, text='refresh table', command=self.refresh_table).place(y=0, x=740, height=50, width=100)
        Button(opf, text='refresh list box').place(y=50, x=740, height=50, width=100)
        opf.place(x=0, y=600, height=400, width=840)
        Button(opf, text = "create empty dataframe",font=('ariel',16),
               command=self.show_table).place(y=145, x=200, height=40, width=300)

        "mysql information entries :-"

        Label(opf, text="host", font=('Arial', 16, 'bold')).place(x=5, y=5, height=40, width=100)
        self.host = StringVar()
        self.host.set("localhost")
        Entry(opf, textvariable=self.host, width=30
              , font=('Arial', 16, 'bold')).place(x=105, y=5, height=40, width=200)

        Label(opf, text="user", font=('Arial', 16, 'bold')).place(x=5, y=50, height=40, width=100)
        self.user = StringVar()
        self.user.set("root")
        Entry(opf, textvariable=self.user, width=30
              , font=('Arial', 16, 'bold')).place(x=105, y=50, height=40, width=200)

        Label(opf, text="password", font=('Arial', 16, 'bold')).place(x=5, y=95, height=40, width=100)
        self.password = StringVar()

        Entry(opf, show="*", textvariable=self.password, width=30
              , font=('Arial', 16, 'bold')).place(x=105, y=95, height=40, width=200)

        Button(opf, text="connect to mysql", font=('Arial', 12,),
               command=self.connect_mysql).place(x=315, y=5, height=40, width=150)

        Button(opf, text="check connection", font=('Arial', 12,),
               command=self.check_connection).place(x=315, y=50, height=40, width=150)

        Label(opf, text="connection", font=('Arial', 12, 'bold')).place(x=315, y=95, height=40, width=100)

        self.con_color_btn = Button(opf, bg="red", state=DISABLED)
        self.con_color_btn.place(x=425, y=95, height=40, width=40)

        "save to data base section :-"

        Label(opf, text="save to current database", font=('Arial', 12)).place(x=470, y=5, height=40, width=170)
        Button(opf, text="save as", command=self.save_to_mysql).place(x=470, y=50, height=40, width=170)
        self.t_name = StringVar()
        Entry(opf, textvariable=self.t_name).place(x=470, y=90, height=40, width=170)

        self.tables_box = Listbox(opf, width=200, height=300, font=('Arial', 16, 'bold'))
        self.tables_box.place(x=640, y=100)

        self.tables_box_update()

        # rf implies result frame
        self.rf = Frame(self, height=800, width=960, bd=5, relief="sunken")
        self.rf.place(x=840, y=0)
        Label(self.rf, text="RESULT OF QUERY", font=('Arial', 32, "bold")).place(x=0, y=0, height=60, width=960)

        # query box
        Label(self.rf, text="mysql query box :- ", font=('Arial', 12, 'bold')).place(x=380, y=70, height=40, width=200)
        self.input_txt = Text(self.rf, bg="light yellow", font=('Arial', 14,))
        self.input_txt.place(x=0, y=75 + 40, width=960, height=135)

        Button(self.rf, text='previous', command=self.previous,
               font=('Arial', 12, 'bold')).place(x=150, y=252, height=40, width=100)

        Button(self.rf, text='next', command=self.next,
               font=('Arial', 12, 'bold')).place(x=260, y=252, height=40, width=100)

        Button(self.rf, text='clear query', command=self.clear_text,
               font=('Arial', 12, 'bold')).place(x=370, y=252, height=40, width=100)

        Button(self.rf, text='run query', command=self.mysql_execute,
               font=('Arial', 12, 'bold')).place(x=490, y=252, height=40, width=100)

        Button(self.rf, text='commit', command=self.mysql_rollback,
               font=('Arial', 12, 'bold')).place(x=600, y=252, height=40, width=100)

        Button(self.rf, text='rollback', command=self.mysql_commit,
               font=('Arial', 12, 'bold')).place(x=710, y=252, height=40, width=100)


    def previous(self):
        if self.cur_result_no > 0:
            self.cur_result_no -= 1
            self.show_result_Table(self.results[self.cur_result_no])

    def next(self):
        if self.cur_result_no < len(self.results) - 1:
            self.cur_result_no += 1
            self.show_result_Table(self.results[self.cur_result_no])

    def save_to_mysql(self):
        if self.sel_table is not None and self.check_connection() and self.t_name.get() != "":
            self.cur.execute("select database()")  # shows current database name
            x = self.cur.fetchone()[0]
            self.cur.fetchall()
        else:
            print("error in save_to_mysql")

    def get_text(self):
        self.text = self.input_txt.get("1.0", "end-1c")
        return self.text

    def clear_text(self):
        self.input_txt.delete("1.0", "end")

    def tables_box_update(self):
        if self.tables_box.size() > 0:
            self.tables_box.delete(1, self.tables_box.size())

        self.tables_box.insert(1, *[f"table {x}" for x in range(len(self.data))])

    def refresh_table(self):
        print(self.tables_box.curselection())
        if self.sel_table is not None:
            self.table_frame.destroy()
        self.sel_table = self.data[self.tables_box.curselection()[0]]
        self.show_table(self.sel_table)

    def input_data(self, *args):
        for arg in args:
            if isinstance(arg, type(pd.DataFrame)):
                self.data.append(arg)
            elif isinstance(arg, dict):
                self.data.append(pd.DataFrame(arg))
            elif isinstance(arg, list):
                self.data.append(pd.DataFrame({x[0]: x[1:] for x in zip(*arg)}))
            else:
                self.data.append(arg)
            # else:
            #   raise TypeError(f"type of data is not dict or list or dataframe.Given type is {type(arg)}")

    def show_table(self, dataframe=None):
        if self.table_frame:
            self.table_frame.destroy()
        self.table_frame = Frame(self, height=600, width=840, relief=SUNKEN, bd=5)
        x = Table(self.table_frame, dataframe=dataframe
                  , showstatusbar=True, showtoolbar=True, height=600, width=840)
        x.show()
        self.table_frame.place(x=0, y=0, height=600, width=840)

    def connect_mysql(self):
        if not self.mycon:
            if self.user.get() and self.host.get() and self.password.get():
                self.mycon = mysql.connector.connect(host=self.host.get(), user=self.user.get(),
                                                     passwd=self.password.get())
                if self.check_connection():
                    self.cur = self.mycon.cursor()

            else:
                messagebox.showerror('Python Error', 'Error: user ,host ,password field should not be empty')

    def mysql_commit(self):
        if self.mycon is not None:
            self.mycon.commit()

    def mysql_rollback(self):
        if self.mycon is not None:
            self.mycon.rollback()

    def check_connection(self):
        if self.mycon:
            if self.mycon.is_connected():
                print("successfully connected to mysql database")
                self.con_color_btn.config(bg="green")
                return True
            else:
                print("connection unsuccessful")
                self.con_color_btn.config(bg='red')
                return False
        else:
            messagebox.showerror('Python Error', 'Error: establish connection first')
            return False

    def mysql_execute(self):
        if self.check_connection():
            self.cur.execute(self.get_text())
            a = self.cur.column_names
            b = self.cur.fetchall()
            b = list(zip(*b))
            print(a, b)
            if a or b:
                df = pd.DataFrame({a[x]: b[x] for x in range((len(a)))})
                self.results.append(df)
                self.cur_result_no = len(self.results) - 1
                self.show_result_Table(df)

    def show_result_Table(self, dataframe):
        table_frame = Frame(self.rf, height=600, width=840, relief=SUNKEN, bd=5)
        x = Table(table_frame, dataframe=dataframe
                  , showstatusbar=True, showtoolbar=False, height=600, width=800)
        table_frame.place(x=0, y=300, height=500, width=960)
        x.show()


if __name__ == '__main__':
    l = list()
    for _ in range(2):
        l.append(TableModel.getSampleData())

    root = Tk()
    root.geometry("1800x800")
    root.resizable(False, False)
    t = table_options(root, l)
    t.show_result_Table(l[0])
    t.pack()
    root.mainloop()
